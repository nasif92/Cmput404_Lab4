Question 1: What is the link to your github repository for this lab?

Answer: https://github.com/nasif92/Cmput404_Lab4.git

Question 2: After starting a brand new Django application and running the runserver command, what does the browser show you?

Answer: Congratulations page showing Django has been installed successfully

Question 3: After creating the first view within polls, what does the browser show you when navigating to / and to /polls respectively?

Answer: For / it shows the 404 Page not found http error, and adding /polls takes me to the polls index with the message "Hello, world. You're at the polls index."

Question 4: What is a Django migration and why do we need them?

Answer: We need Django migration for propagating changes made to the models to the database schema.
Our migration helped create the two tables in our database for our models Question and Choice.

Question 5: What do you see after you log into the Django adminstration site? From a high level, how do you get custom models to appear in the Django admin page?

Answer: We see Django adminstration page. Clicking on the add button, the interface can be used to create custom models, add database entries, and handle users and groups there.

Question 6: What do you see when you go to /polls/38/ in your browser? What about /polls/38/results and /polls/38/vote? What happens when you donâ€™t put a number, and instead use a string? How would you modify the urls.py file to allow arbitrary alphabetic characters?

Answer: "You're looking at question 38." when we go to /polls/38/ 
You're looking at the results of question 38. when adding /results
You're voting on question 38. when adding /vote 


Question 7: Why is it a bad idea to hardcode urls into the templates?

Answer: It may break our overall application if we hardcode urls into the templates, as we already have urls in our urls.py file. It will make the project more difficult to handle.


Question 8: What are the benefits of using Django's generic views over writing views 'the hard way'? When should you use a generic view and when shouldn't you use a generic view?

Answer: Django's generic views makes the application and its patterns abstract, to be re-usable and extended for common interface uses. Otherwise, its monotonous to code everything everytime a new view is needed.
